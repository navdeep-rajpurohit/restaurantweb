@page "/category"
@using Resturent.Models;
@inject IJSRuntime jsruntime
@inject CategoryService objCategoryService
@inject NavigationManager NavigationManager
@if (objCategory == null)
{
    <p>Loading....</p> }
else
{
    <MudTable Items="@objCategory" MultiSelection="true" Dense="@dense" Hover="@hover" Bordered="@bordered" Striped="@striped" Filter="new Func<Category, bool>(FilterFunc)" @bind-SelectedItems="selectedItems">
        <ToolBarContent>
            <MudText Typo="Typo.h6">Add Category</MudText>
            <a href="/addCategory">
                <MudFab Color="Color.Primary" Icon="@Icons.Material.Filled.Add" Size="Size.Small" IconSize="Size.Small" Class="ma-2" />
            </a>
            <MudToolBarSpacer />
            <MudTextField @bind-Value="searchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>





        </ToolBarContent>
        <HeaderContent>

            <MudTh><MudTableSortLabel SortBy="new Func<Category, object>(x=>x.CategoryName)"><strong>Category Name</strong></MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<Category, object>(x=>x.Description)"><strong>Category Desc</strong></MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<Category, object>(x=>x.Image)"><strong>Image</strong></MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<Category, object>(x=>x.IsActive)"><strong>Is Active</strong></MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<Category, object>(x=>x.EDate)"><strong>Entry Date</strong></MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<Category, object>(x=>x.MDate)"><strong>Modify Date</strong></MudTableSortLabel></MudTh>
            <MudTh><strong>Actions</strong></MudTh>




        </HeaderContent>

        <RowTemplate>


            <MudTd DataLabel="Category Name">@context.CategoryName</MudTd>
            <MudTd DataLabel="Category Desc">@context.Description</MudTd>
            <MudTd DataLabel="Image"><img src="data:image/jpg;base64,@(Convert.ToBase64String(context.Image))" width="50px" height="50px" /></MudTd>
            <MudTd DataLabel="Is Active">@(context.IsActive == true ? "Yes" : "No")</MudTd>
            <MudTd DataLabel="Entry Date">@context.EDate?.ToString("dd-MMM-yyyy hh:mm")</MudTd>
            <MudTd DataLabel="Modify Date">@context.MDate?.ToString("dd-MMM-yyyy hh:mm")</MudTd>
            <MudTd DataLabel="Action">




                <a href="/editUser/@context.UserId">
                    <MudFab Color="Color.Secondary" Icon="@Icons.Material.Filled.Edit" Size="Size.Small" IconSize="Size.Small" />
                </a>

                <MudFab Color="Color.Primary" @onclick="@(()=>Delete(@context.CategoryId))" Icon="@Icons.Material.Filled.Delete" Size="Size.Small" IconSize="Size.Small" />



            </MudTd>

        </RowTemplate>




        <PagerContent>
            <MudTablePager />

        </PagerContent>


    </MudTable>

    <MudToolBar>
        <MudSwitch @bind-Checked="@hover" Color="Color.Primary">Hover</MudSwitch>
        <MudSwitch @bind-Checked="@dense" Color="Color.Secondary">Dense</MudSwitch>
        <MudSwitch @bind-Checked="@striped" Color="Color.Tertiary">Striped</MudSwitch>
        <MudSwitch @bind-Checked="@bordered" Color="Color.Warning">Bordered</MudSwitch>
        <MudToolBarSpacer />
        <div style="min-width:200px;">



            <MudText Inline="true">Selected items: @(selectedItems == null ? "" : string.Join(", ", selectedItems.OrderBy(x => x.CategoryName).Select(x => x.CategoryName)))</MudText>
        </div>



    </MudToolBar>
    @*<MudButton Variant="Variant.Filled" OnClick="@(async()=> { await GenerateExcel(); })" StartIcon="fas fa-file-excel" Color="Color.Primary" Size="Size.Small">Save to excel</MudButton>*@



    <MudButton Variant="Variant.Filled" @onclick="@(()=>DeleteMulti(selectedItems.Select(x => x.CategoryId).ToArray()))" StartIcon="fas fa-user-times" Color="Color.Secondary" Size="Size.Small">Delete Selected</MudButton>
}


@code {
    private bool dense = false;
    private bool hover = true;
    private bool striped = false;
    private bool bordered = false;
    private string searchString = "";



    List<Category> objCategory;

    Category obj = new Category();

    private HashSet<Category> selectedItems = new HashSet<Category>();
    private HashSet<Category> category = new HashSet<Category>();



    //display
    private HashSet<Category> GetCategory()
    {

        objCategory = objCategoryService.GetCategory(); //after delete display
        return category;
    }

    protected override async Task OnInitializedAsync()
    {
        objCategory = await Task.Run(() => objCategoryService.GetCategory());

    }


    //search
    private bool FilterFunc(Category element)
    {@*if (string.IsNullOrWhiteSpace(searchString))
            return true;*@ @* if (element.UserName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
        return true;*@ @* if (element.MobileNo.Contains(searchString, StringComparison.OrdinalIgnoreCase))
                return true;*@if ($"{element.CategoryName}".Contains(searchString))
            return true;

        return false;
    }

    //delete
    protected void Delete(long CategoryId)
    {
        objCategoryService.Delete(CategoryId);
        GetCategory();

    }
    //multiDelete
    protected void DeleteMulti(long[] num)
    {
        foreach (long x in num)
        {
            objCategoryService.Delete(x);
        }
        GetCategory();
    }



    //----------------------------------------Excel export----------------------------------//

}

@page "/user"
@using Resturent.Models
@using NPOI.SS.UserModel
@using NPOI.XSSF.UserModel
@using System.IO
@using Microsoft.AspNetCore.Components;
@inject IJSRuntime jsruntime
@inject UserService objUserService
@inject NavigationManager NavigationManager
@if (objUser == null)
{
    <p>Loading....</p>
}
else
{
    <MudTable Items="@objUser" MultiSelection="true" Dense="@dense" Hover="@hover" Bordered="@bordered" Striped="@striped" Filter="new Func<User, bool>(FilterFunc)" @bind-SelectedItems="selectedItems">
        <ToolBarContent>
            <MudText Typo="Typo.h6">Add User</MudText>
            <a href="/addUser">
                <MudFab Color="Color.Primary" Icon="@Icons.Material.Filled.Add" Size="Size.Small" IconSize="Size.Small" Class="ma-2" />
            </a>
            <MudToolBarSpacer />
            <MudTextField @bind-Value="searchString"  Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>

            



        </ToolBarContent>
        <HeaderContent>

            <MudTh><MudTableSortLabel SortBy="new Func<User, object>(x=>x.UserName)"><strong>User Name</strong></MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<User, object>(x=>x.EmailId)"><strong>Email Id</strong></MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<User, object>(x=>x.IsAdmin)"><strong>Is Admin</strong></MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<User, object>(x=>x.IsActive)"><strong>Is Active</strong></MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<User, object>(x=>x.EDate)"><strong>Entry Date</strong></MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<User, object>(x=>x.MDate)"><strong>Modify Date</strong></MudTableSortLabel></MudTh>
            <MudTh><strong>Actions</strong></MudTh>




        </HeaderContent>

        <RowTemplate>


            <MudTd DataLabel="User Name">@context.UserName</MudTd>
            <MudTd DataLabel="Email Id">@context.EmailId</MudTd>
            <MudTd DataLabel="Is Admin">@(context.IsAdmin == true ? "Yes" : "No")</MudTd>
            <MudTd DataLabel="Is Active">@(context.IsActive == true ? "Yes" : "No")</MudTd>
            <MudTd DataLabel="Entry Date">@context.EDate?.ToString("dd-MMM-yyyy hh:mm")</MudTd>
            <MudTd DataLabel="Modify Date">@context.MDate?.ToString("dd-MMM-yyyy hh:mm")</MudTd>
            <MudTd DataLabel="Action">




                <a href="/editUser/@context.UserId">
                    <MudFab Color="Color.Secondary" Icon="@Icons.Material.Filled.Edit" Size="Size.Small" IconSize="Size.Small" />
                </a>

                <MudFab Color="Color.Primary" @onclick="@(()=>Delete(@context.UserId))" Icon="@Icons.Material.Filled.Delete" Size="Size.Small" IconSize="Size.Small" />



            </MudTd>

        </RowTemplate>




        <PagerContent>
            <MudTablePager />

        </PagerContent>


    </MudTable>

    <MudToolBar>
        <MudSwitch @bind-Checked="@hover" Color="Color.Primary">Hover</MudSwitch>
        <MudSwitch @bind-Checked="@dense" Color="Color.Secondary">Dense</MudSwitch>
        <MudSwitch @bind-Checked="@striped" Color="Color.Tertiary">Striped</MudSwitch>
        <MudSwitch @bind-Checked="@bordered" Color="Color.Warning">Bordered</MudSwitch>
        <MudToolBarSpacer />
        <div style="min-width:200px;">



            <MudText Inline="true">Selected items: @(selectedItems == null ? "" : string.Join(", ", selectedItems.OrderBy(x => x.UserName).Select(x => x.UserName)))</MudText>
        </div>



    </MudToolBar>

    <MudButton Variant="Variant.Filled" OnClick="@(async()=> { await GenerateExcel(); })" StartIcon="fas fa-file-excel" Color="Color.Primary" Size="Size.Small">Save to excel</MudButton> 

    

    <MudButton Variant="Variant.Filled" @onclick="@(()=>DeleteMulti(selectedItems.Select(x => x.UserId).ToArray()))" StartIcon="fas fa-user-times" Color="Color.Secondary" Size="Size.Small">Delete Selected</MudButton>







}


@code {



    private bool dense = false;
    private bool hover = true;
    private bool striped = false;
    private bool bordered = false;
    private string searchString = "";




    List<User> objUser;
    List<User> objUser1;
    User obj = new User();

    private HashSet<User> selectedItems = new HashSet<User>();
    private HashSet<User> user = new HashSet<User>();



    //display
    private HashSet<User> GetUsers()
    {

        objUser = objUserService.GetUser(); //after delete display
        return user;
    }

    protected override async Task OnInitializedAsync()
    {
        objUser = await Task.Run(() => objUserService.GetUser());

    }


    //search
    private bool FilterFunc(User element)
    {
        @*if (string.IsNullOrWhiteSpace(searchString))
            return true;*@
        @* if (element.UserName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;*@
        @* if (element.MobileNo.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;*@
    if ($"{element.UserName} {element.MobileNo}".Contains(searchString))
        return true;

    return false;
}

//delete
protected void Delete(long UserId)
{
    objUserService.Delete(UserId);
    GetUsers();

}
//multiDelete
protected void DeleteMulti(long[] num)
{
    foreach (long x in num)
    {
        objUserService.Delete(x);
    }
    GetUsers();
}



//----------------------------------------Excel export----------------------------------//

public async Task GenerateExcel()
{
    objUser = objUserService.GetUser();

    IWorkbook workbook = new XSSFWorkbook();

    var dataformat = workbook.CreateDataFormat();
    var datastyle = workbook.CreateCellStyle();
    datastyle.DataFormat = dataformat.GetFormat("dd - MMM - yyyy hh: mm");

    ISheet worksheet = workbook.CreateSheet("Sheet1");

    int rowNumber = 0;
    IRow row = worksheet.CreateRow(rowNumber++);

    //-------------------------sheet header------------------

    ICell cell = row.CreateCell(0);
    cell.SetCellValue("User Name");

    cell = row.CreateCell(1);
    cell.SetCellValue("Email Id");

    cell = row.CreateCell(2);
    cell.SetCellValue("Mobile No.");

    cell = row.CreateCell(3);
    cell.SetCellValue("Entry Date");

    cell = row.CreateCell(4);
    cell.SetCellValue("Modify Date");


    //sheet value

    foreach (var user in objUser)
    {

        row = worksheet.CreateRow(rowNumber++);

        cell = row.CreateCell(0);
        cell.SetCellValue(user.UserName);

        cell = row.CreateCell(1);
        cell.SetCellValue(user.EmailId);

        cell = row.CreateCell(2);
        cell.SetCellValue(user.MobileNo);

        cell = row.CreateCell(3);
        cell.SetCellValue(user.EDate?.ToString("dd-MMM-yyyy hh:mm"));

        cell = row.CreateCell(4);
        cell.SetCellValue(user.MDate?.ToString("dd-MMM-yyyy hh:mm"));



    }


    MemoryStream ms = new MemoryStream();
    workbook.Write(ms);
    byte[] bytes = ms.ToArray();
    ms.Close();

    await jsruntime.SaveAsFileAsync("User List", bytes, "application/vnd.ms-excel");


}

}
